<?php


/**
 * Base class that represents a query for the 'mailinguser' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.4-dev on:
 *
 * Wed May 16 11:52:32 2012
 *
 * @method     MailinguserQuery orderByTitle($order = Criteria::ASC) Order by the title column
 * @method     MailinguserQuery orderByEmail($order = Criteria::ASC) Order by the email column
 * @method     MailinguserQuery orderByName($order = Criteria::ASC) Order by the name column
 * @method     MailinguserQuery orderById($order = Criteria::ASC) Order by the id column
 *
 * @method     MailinguserQuery groupByTitle() Group by the title column
 * @method     MailinguserQuery groupByEmail() Group by the email column
 * @method     MailinguserQuery groupByName() Group by the name column
 * @method     MailinguserQuery groupById() Group by the id column
 *
 * @method     MailinguserQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     MailinguserQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     MailinguserQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     MailinguserQuery leftJoinSubscription($relationAlias = null) Adds a LEFT JOIN clause to the query using the Subscription relation
 * @method     MailinguserQuery rightJoinSubscription($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Subscription relation
 * @method     MailinguserQuery innerJoinSubscription($relationAlias = null) Adds a INNER JOIN clause to the query using the Subscription relation
 *
 * @method     MailinguserQuery leftJoinMailingSubscription($relationAlias = null) Adds a LEFT JOIN clause to the query using the MailingSubscription relation
 * @method     MailinguserQuery rightJoinMailingSubscription($relationAlias = null) Adds a RIGHT JOIN clause to the query using the MailingSubscription relation
 * @method     MailinguserQuery innerJoinMailingSubscription($relationAlias = null) Adds a INNER JOIN clause to the query using the MailingSubscription relation
 *
 * @method     Mailinguser findOne(PropelPDO $con = null) Return the first Mailinguser matching the query
 * @method     Mailinguser findOneOrCreate(PropelPDO $con = null) Return the first Mailinguser matching the query, or a new Mailinguser object populated from the query conditions when no match is found
 *
 * @method     Mailinguser findOneByTitle(string $title) Return the first Mailinguser filtered by the title column
 * @method     Mailinguser findOneByEmail(string $email) Return the first Mailinguser filtered by the email column
 * @method     Mailinguser findOneByName(string $name) Return the first Mailinguser filtered by the name column
 * @method     Mailinguser findOneById(int $id) Return the first Mailinguser filtered by the id column
 *
 * @method     array findByTitle(string $title) Return Mailinguser objects filtered by the title column
 * @method     array findByEmail(string $email) Return Mailinguser objects filtered by the email column
 * @method     array findByName(string $name) Return Mailinguser objects filtered by the name column
 * @method     array findById(int $id) Return Mailinguser objects filtered by the id column
 *
 * @package    propel.generator.plugins.zeusMailingPlugin.lib.model.om
 */
abstract class BaseMailinguserQuery extends ModelCriteria
{
	
	/**
	 * Initializes internal state of BaseMailinguserQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Mailinguser', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new MailinguserQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    MailinguserQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof MailinguserQuery) {
			return $criteria;
		}
		$query = new MailinguserQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key.
	 * Propel uses the instance pool to skip the database if the object exists.
	 * Go fast if the query is untouched.
	 *
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Mailinguser|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($key === null) {
			return null;
		}
		if ((null !== ($obj = MailinguserPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
			// the object is alredy in the instance pool
			return $obj;
		}
		if ($con === null) {
			$con = Propel::getConnection(MailinguserPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		if ($this->formatter || $this->modelAlias || $this->with || $this->select
		 || $this->selectColumns || $this->asColumns || $this->selectModifiers
		 || $this->map || $this->having || $this->joins) {
			return $this->findPkComplex($key, $con);
		} else {
			return $this->findPkSimple($key, $con);
		}
	}

	/**
	 * Find object by primary key using raw SQL to go fast.
	 * Bypass doSelect() and the object formatter by using generated code.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    Mailinguser A model object, or null if the key is not found
	 */
	protected function findPkSimple($key, $con)
	{
		$sql = 'SELECT `TITLE`, `EMAIL`, `NAME`, `ID` FROM `mailinguser` WHERE `ID` = :p0';
		try {
			$stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
		}
		$obj = null;
		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$obj = new Mailinguser();
			$obj->hydrate($row);
			MailinguserPeer::addInstanceToPool($obj, (string) $row[0]);
		}
		$stmt->closeCursor();

		return $obj;
	}

	/**
	 * Find object by primary key.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    Mailinguser|array|mixed the result, formatted by the current formatter
	 */
	protected function findPkComplex($key, $con)
	{
		// As the query uses a PK condition, no limit(1) is necessary.
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKey($key)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKeys($keys)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->format($stmt);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    MailinguserQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(MailinguserPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    MailinguserQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(MailinguserPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the title column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByTitle('fooValue');   // WHERE title = 'fooValue'
	 * $query->filterByTitle('%fooValue%'); // WHERE title LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $title The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    MailinguserQuery The current query, for fluid interface
	 */
	public function filterByTitle($title = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($title)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $title)) {
				$title = str_replace('*', '%', $title);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(MailinguserPeer::TITLE, $title, $comparison);
	}

	/**
	 * Filter the query on the email column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByEmail('fooValue');   // WHERE email = 'fooValue'
	 * $query->filterByEmail('%fooValue%'); // WHERE email LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $email The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    MailinguserQuery The current query, for fluid interface
	 */
	public function filterByEmail($email = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($email)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $email)) {
				$email = str_replace('*', '%', $email);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(MailinguserPeer::EMAIL, $email, $comparison);
	}

	/**
	 * Filter the query on the name column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByName('fooValue');   // WHERE name = 'fooValue'
	 * $query->filterByName('%fooValue%'); // WHERE name LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $name The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    MailinguserQuery The current query, for fluid interface
	 */
	public function filterByName($name = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($name)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $name)) {
				$name = str_replace('*', '%', $name);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(MailinguserPeer::NAME, $name, $comparison);
	}

	/**
	 * Filter the query on the id column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    MailinguserQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(MailinguserPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query by a related Subscription object
	 *
	 * @param     Subscription $subscription  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    MailinguserQuery The current query, for fluid interface
	 */
	public function filterBySubscription($subscription, $comparison = null)
	{
		if ($subscription instanceof Subscription) {
			return $this
				->addUsingAlias(MailinguserPeer::ID, $subscription->getMailinguserId(), $comparison);
		} elseif ($subscription instanceof PropelCollection) {
			return $this
				->useSubscriptionQuery()
				->filterByPrimaryKeys($subscription->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterBySubscription() only accepts arguments of type Subscription or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Subscription relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    MailinguserQuery The current query, for fluid interface
	 */
	public function joinSubscription($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Subscription');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Subscription');
		}

		return $this;
	}

	/**
	 * Use the Subscription relation Subscription object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    SubscriptionQuery A secondary query class using the current class as primary query
	 */
	public function useSubscriptionQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinSubscription($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Subscription', 'SubscriptionQuery');
	}

	/**
	 * Filter the query by a related MailingSubscription object
	 *
	 * @param     MailingSubscription $mailingSubscription  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    MailinguserQuery The current query, for fluid interface
	 */
	public function filterByMailingSubscription($mailingSubscription, $comparison = null)
	{
		if ($mailingSubscription instanceof MailingSubscription) {
			return $this
				->addUsingAlias(MailinguserPeer::ID, $mailingSubscription->getMailinguserId(), $comparison);
		} elseif ($mailingSubscription instanceof PropelCollection) {
			return $this
				->useMailingSubscriptionQuery()
				->filterByPrimaryKeys($mailingSubscription->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByMailingSubscription() only accepts arguments of type MailingSubscription or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the MailingSubscription relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    MailinguserQuery The current query, for fluid interface
	 */
	public function joinMailingSubscription($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('MailingSubscription');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'MailingSubscription');
		}

		return $this;
	}

	/**
	 * Use the MailingSubscription relation MailingSubscription object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    MailingSubscriptionQuery A secondary query class using the current class as primary query
	 */
	public function useMailingSubscriptionQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinMailingSubscription($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'MailingSubscription', 'MailingSubscriptionQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Mailinguser $mailinguser Object to remove from the list of results
	 *
	 * @return    MailinguserQuery The current query, for fluid interface
	 */
	public function prune($mailinguser = null)
	{
		if ($mailinguser) {
			$this->addUsingAlias(MailinguserPeer::ID, $mailinguser->getId(), Criteria::NOT_EQUAL);
		}

		return $this;
	}

} // BaseMailinguserQuery